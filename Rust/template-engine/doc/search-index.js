var searchIndex = JSON.parse('{\
"lib":{"doc":"HTML template engine","t":[4,3,13,13,13,13,4,13,13,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,5,5,5,5,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["ContentType","ExpressionData","ForTag","IfTag","Literal","Tag","TagType","TemplateVariable","Unrecognized","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_matching_pair","check_symbol_string","eq","eq","eq","fmt","fmt","fmt","from","from","from","generate_html_template_var","get_content_type","get_expression_data","get_index_for_symbol","head","into","into","into","ne","ne","tail","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","variable","0","0","0"],"q":["lib","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lib::ContentType","",""],"d":["ContentType is the main data structure to classify the …","A struct to store the result of the tokenization of the …","","","","","TagType is a supporting data structure that is used to …","","","","","","","","","Checking if the two matching tags are contained within the …","Checks if a symbol string, for example, ‘{%’, is …","","","","","","","","","","constructs the output html statement consisting of head, …","Entry point for parser. Accepts an input statement  and …","This parses an expression with a template variable, parses …","takes two parameters and returns the index  where the …","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,2,2,0,2,2,2,1,3,2,1,3,0,0,2,1,3,2,1,3,2,1,3,0,0,0,0,3,2,1,3,2,3,3,2,1,3,2,1,3,2,1,3,3,4,5,6],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[["contenttype",4]],["bool",15]],[[["tagtype",4]],["bool",15]],[[["expressiondata",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["hashmap",3,["string","string"]],["string",3],["expressiondata",3]],["string",3]],[[["str",15]],["contenttype",4]],[[["str",15]],["expressiondata",3]],[[["str",15],["char",15]]],null,[[]],[[]],[[]],[[["contenttype",4]],["bool",15]],[[["expressiondata",3]],["bool",15]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null],"p":[[4,"TagType"],[4,"ContentType"],[3,"ExpressionData"],[13,"Literal"],[13,"TemplateVariable"],[13,"Tag"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};